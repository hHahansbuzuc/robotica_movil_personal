#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
from std_msgs.msg import Float64MultiArray
from std_msgs.msg import Float64
import time

class PIDController(Node):
    def __init__(self, Kp, Ki, Kd):
        super().__init__('pid_controller')
        self.pub = self.create_publisher(Twist, '/cmd_vel_mux/cmd_vel', 10, callback_group=cbg)

    	# Se inicializan las variables y coeficientes
        self.Kp = Kp
        self.Ki = Ki
        self.Kd = Kd

        # Estado del sistema se modificara cada vuelta nueva
        self.r_t = 0.0
        self.y_t = 0.0

        # Errores históricos, se modificaran cada vuelta nueva
        self.e_k = 0.0
        self.e_k1 = 0.0
        self.e_k2 = 0.0

        # Control anterior
        self.u_k1 = 0.0

        # Paso de tiempo
        self.dt = 0.01  # lo fijo a 100 Hz por conveniencia

        # Suscriptores
        self.create_subscription(Float64, 'state', self.callback_state, 10)
        self.create_subscription(Float64MultiArray, 'objetivo', self.callback_setpoint, 10)

        # Publicador
        self.publisher_ = self.create_publisher(Float64, 'control_effort', 10)
        # Es hasta cierto punto nuestra resolucion
        self.create_timer(self.dt, self.control_loop)

    def callback_setpoint(self, msg):
        self.r_t = msg.data

    def callback_state(self, msg):
        self.y_t = msg.data

    def control_loop(self):
        # Error actual
        self.e_k = self.r_t - self.y_t

        # Esta es una manera para que yo pueda subdividir el PID que quedaría gigante si simpleemente pusiera todo junto
        a0 = self.Kp + self.Ki * self.dt + self.Kd / self.dt
        a1 = -self.Kp - 2 * (self.Kd / self.dt)
        a2 = self.Kd / self.dt

        # PID
        u_k = self.u_k1 + a0 * self.e_k + a1 * self.e_k1 + a2 * self.e_k2

        # Publicar
        self.publisher_.publish(Float64(data=u_k))

        # Desplazar historial, error anterior es igual al error actual
        self.e_k2 = self.e_k1
        self.e_k1 = self.e_k
        self.u_k1 = u_k

def main(args=None):
    rclpy.init(args=args)
    # LO que me piden
    pid = PIDController(0.5, 0.1, 0.01) 
    rclpy.spin_once(pid)
    rclpy.spin(pid)
    pid.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
